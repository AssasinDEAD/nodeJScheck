// index.js
const express = require("express");
const { Pool } = require("pg");
// const dotenv = require("dotenv"); dotenv.config();

const app = express();
app.use(express.json());

// --- Конфиг подключения к PostgreSQL ---
const DB_CONFIG = {
  host: "localhost",
  user: "postgres",
  password: "",      // укажи пароль, если есть
  database: "test_db",
  port: 5432,
};

// --- Пул соединений ---
const pool = new Pool(DB_CONFIG);

// --- Авто-создание таблиц при старте ---
async function ensureSchema() {
  const conn = await pool.connect();
  try {
    await conn.query(`
      CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        name VARCHAR(50) NOT NULL,
        age INTEGER,
        city VARCHAR(50)
      );
    `);

    await conn.query(`
      CREATE TABLE IF NOT EXISTS projects (
        id SERIAL PRIMARY KEY,
        title VARCHAR(100) NOT NULL,
        budget INTEGER
      );
    `);

    await conn.query(`
      CREATE TABLE IF NOT EXISTS user_projects (
        id SERIAL PRIMARY KEY,
        user_id INTEGER NOT NULL,
        project_id INTEGER NOT NULL
      );
    `);

    await conn.query(`CREATE INDEX IF NOT EXISTS idx_up_user ON user_projects(user_id);`);
    await conn.query(`CREATE INDEX IF NOT EXISTS idx_up_project ON user_projects(project_id);`);

    console.log("✅ Schema ensured (tables created if not exist)");
  } finally {
    conn.release();
  }
}

// ---------- Helpers ----------
function notFound(res, entity = "Item") {
  return res.status(404).json({ error: `${entity} not found` });
}
function ok(res, data) {
  return res.json(data);
}

// ---------- Users ----------
app.post("/users", async (req, res) => {
  try {
    const { name, age, city } = req.body;
    if (!name) return res.status(400).json({ error: "name is required" });

    const r = await pool.query(
      "INSERT INTO users (name, age, city) VALUES ($1, $2, $3) RETURNING id",
      [name, age ?? null, city ?? null]
    );
    ok(res, { id: r.rows[0].id, name, age, city });
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: "Internal error" });
  }
});

app.get("/users", async (req, res) => {
  try {
    const { city, minAge } = req.query;
    const params = [];
    let sql = "SELECT * FROM users WHERE 1=1";

    if (city) { sql += " AND city = $" + (params.length + 1); params.push(city); }
    if (minAge) { sql += " AND age >= $" + (params.length + 1); params.push(Number(minAge)); }

    const rows = (await pool.query(sql, params)).rows;
    ok(res, rows);
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: "Internal error" });
  }
});

app.get("/users/:id", async (req, res) => {
  try {
    const id = Number(req.params.id);
    const r = await pool.query("SELECT * FROM users WHERE id = $1", [id]);
    if (r.rows.length === 0) return notFound(res, "User");
    ok(res, r.rows[0]);
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: "Internal error" });
  }
});

app.put("/users/:id", async (req, res) => {
  try {
    const id = Number(req.params.id);
    const { name, age, city } = req.body;

    const r = await pool.query(
      `UPDATE users
       SET name = COALESCE($1, name),
           age  = COALESCE($2, age),
           city = COALESCE($3, city)
       WHERE id = $4`,
      [name ?? null, age ?? null, city ?? null, id]
    );
    if (r.rowCount === 0) return notFound(res, "User");

    const r2 = await pool.query("SELECT * FROM users WHERE id = $1", [id]);
    ok(res, r2.rows[0]);
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: "Internal error" });
  }
});

app.delete("/users/:id", async (req, res) => {
  try {
    const id = Number(req.params.id);
    const r = await pool.query("DELETE FROM users WHERE id = $1", [id]);
    if (r.rowCount === 0) return notFound(res, "User");
    ok(res, { deleted: id });
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: "Internal error" });
  }
});

// ---------- Projects ----------
app.post("/projects", async (req, res) => {
  try {
    const { title, budget } = req.body;
    if (!title) return res.status(400).json({ error: "title is required" });

    const r = await pool.query(
      "INSERT INTO projects (title, budget) VALUES ($1, $2) RETURNING id",
      [title, budget ?? null]
    );
    ok(res, { id: r.rows[0].id, title, budget });
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: "Internal error" });
  }
});

app.get("/projects", async (req, res) => {
  try {
    const { minBudget } = req.query;
    let sql = "SELECT * FROM projects WHERE 1=1";
    const params = [];
    if (minBudget) { sql += " AND budget >= $1"; params.push(Number(minBudget)); }
    const rows = (await pool.query(sql, params)).rows;
    ok(res, rows);
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: "Internal error" });
  }
});

app.get("/projects/:id", async (req, res) => {
  try {
    const id = Number(req.params.id);
    const r = await pool.query("SELECT * FROM projects WHERE id = $1", [id]);
    if (r.rows.length === 0) return notFound(res, "Project");
    ok(res, r.rows[0]);
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: "Internal error" });
  }
});

app.put("/projects/:id", async (req, res) => {
  try {
    const id = Number(req.params.id);
    const { title, budget } = req.body;

    const r = await pool.query(
      `UPDATE projects
       SET title = COALESCE($1, title),
           budget = COALESCE($2, budget)
       WHERE id = $3`,
      [title ?? null, budget ?? null, id]
    );
    if (r.rowCount === 0) return notFound(res, "Project");

    const r2 = await pool.query("SELECT * FROM projects WHERE id = $1", [id]);
    ok(res, r2.rows[0]);
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: "Internal error" });
  }
});

app.delete("/projects/:id", async (req, res) => {
  try {
    const id = Number(req.params.id);
    const r = await pool.query("DELETE FROM projects WHERE id = $1", [id]);
    if (r.rowCount === 0) return notFound(res, "Project");
    ok(res, { deleted: id });
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: "Internal error" });
  }
});

// ---------- Links (user ↔ project) ----------
app.post("/links", async (req, res) => {
  try {
    const { user_id, project_id } = req.body;
    if (!user_id || !project_id) return res.status(400).json({ error: "user_id and project_id required" });

    const r = await pool.query(
      "INSERT INTO user_projects (user_id, project_id) VALUES ($1, $2) RETURNING id",
      [Number(user_id), Number(project_id)]
    );
    ok(res, { id: r.rows[0].id, user_id, project_id });
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: "Internal error" });
  }
});

// проекты пользователя
app.get("/users/:id/projects", async (req, res) => {
  try {
    const id = Number(req.params.id);
    const rows = (await pool.query(`
      SELECT p.*
      FROM user_projects up
      INNER JOIN projects p ON p.id = up.project_id
      WHERE up.user_id = $1
    `, [id])).rows;
    ok(res, rows);
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: "Internal error" });
  }
});

// пользователи проекта
app.get("/projects/:id/users", async (req, res) => {
  try {
    const id = Number(req.params.id);
    const rows = (await pool.query(`
      SELECT u.*
      FROM user_projects up
      INNER JOIN users u ON u.id = up.user_id
      WHERE up.project_id = $1
    `, [id])).rows;
    ok(res, rows);
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: "Internal error" });
  }
});

// ---------- Запуск ----------
const PORT = process.env.PORT || 3000;

ensureSchema()
  .then(() => {
    app.listen(PORT, () => console.log(`🚀 Server running on http://localhost:${PORT}`));
  })
  .catch((e) => {
    console.error("Schema ensure failed:", e);
    process.exit(1);
  });
