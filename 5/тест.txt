// server.js
// npm i express mysql2
// –ø–æ –∂–µ–ª–∞–Ω–∏—é: npm i dotenv  (–∏ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫–∏ —Å dotenv)

import express from "express";
import mysql from "mysql2/promise";
// import dotenv from "dotenv"; dotenv.config();

const app = express();
app.use(express.json());

// --- –ö–æ–Ω—Ñ–∏–≥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL (–ø–æ–º–µ–Ω—è–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏) ---
const DB_CONFIG = {
  host: "localhost",
  user: "root",
  password: "",     // <-- –µ—Å–ª–∏ –µ—Å—Ç—å –ø–∞—Ä–æ–ª—å, —É–∫–∞–∂–∏ –∑–¥–µ—Å—å
  database: "test_db",
};

// --- –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞) ---
const pool = mysql.createPool(DB_CONFIG);

// --- –ê–≤—Ç–æ-—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ---
async function ensureSchema() {
  const conn = await pool.getConnection();
  try {
    await conn.query(`CREATE TABLE IF NOT EXISTS users (
      id INT AUTO_INCREMENT PRIMARY KEY,
      name VARCHAR(50) NOT NULL,
      age INT,
      city VARCHAR(50)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;`);

    await conn.query(`CREATE TABLE IF NOT EXISTS projects (
      id INT AUTO_INCREMENT PRIMARY KEY,
      title VARCHAR(100) NOT NULL,
      budget INT
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;`);

    await conn.query(`CREATE TABLE IF NOT EXISTS user_projects (
      id INT AUTO_INCREMENT PRIMARY KEY,
      user_id INT NOT NULL,
      project_id INT NOT NULL,
      INDEX idx_up_user (user_id),
      INDEX idx_up_project (project_id)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;`);

    // –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ (—è –æ—Å—Ç–∞–≤–∏–ª –ø—Ä–æ—Å—Ç—É—é —Å—Ö–µ–º—É, –∫–∞–∫ —Ç—ã –ª—é–±–∏—à—å)
    console.log("‚úÖ Schema ensured (tables created if not exist)");
  } finally {
    conn.release();
  }
}

// ---------- Helpers ----------
function notFound(res, entity = "Item") {
  return res.status(404).json({ error: `${entity} not found` });
}

function ok(res, data) {
  return res.json(data);
}

// ---------- Users ----------
app.post("/users", async (req, res) => {
  try {
    const { name, age, city } = req.body;
    if (!name) return res.status(400).json({ error: "name is required" });

    const [r] = await pool.query(
      "INSERT INTO users (name, age, city) VALUES (?, ?, ?)",
      [name, age ?? null, city ?? null]
    );
    ok(res, { id: r.insertId, name, age, city });
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: "Internal error" });
  }
});

app.get("/users", async (req, res) => {
  try {
    const { city, minAge } = req.query;
    const params = [];
    let sql = "SELECT * FROM users WHERE 1=1";

    if (city) { sql += " AND city = ?"; params.push(city); }
    if (minAge) { sql += " AND age >= ?"; params.push(Number(minAge)); }

    const [rows] = await pool.query(sql, params);
    ok(res, rows);
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: "Internal error" });
  }
});

app.get("/users/:id", async (req, res) => {
  try {
    const id = Number(req.params.id);
    const [rows] = await pool.query("SELECT * FROM users WHERE id = ?", [id]);
    if (rows.length === 0) return notFound(res, "User");
    ok(res, rows[0]);
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: "Internal error" });
  }
});

app.put("/users/:id", async (req, res) => {
  try {
    const id = Number(req.params.id);
    const { name, age, city } = req.body;

    const [r] = await pool.query(
      "UPDATE users SET name = COALESCE(?, name), age = COALESCE(?, age), city = COALESCE(?, city) WHERE id = ?",
      [name ?? null, age ?? null, city ?? null, id]
    );
    if (r.affectedRows === 0) return notFound(res, "User");
    const [rows] = await pool.query("SELECT * FROM users WHERE id = ?", [id]);
    ok(res, rows[0]);
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: "Internal error" });
  }
});

app.delete("/users/:id", async (req, res) => {
  try {
    const id = Number(req.params.id);
    const [r] = await pool.query("DELETE FROM users WHERE id = ?", [id]);
    if (r.affectedRows === 0) return notFound(res, "User");
    ok(res, { deleted: id });
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: "Internal error" });
  }
});

// ---------- Projects ----------
app.post("/projects", async (req, res) => {
  try {
    const { title, budget } = req.body;
    if (!title) return res.status(400).json({ error: "title is required" });

    const [r] = await pool.query(
      "INSERT INTO projects (title, budget) VALUES (?, ?)",
      [title, budget ?? null]
    );
    ok(res, { id: r.insertId, title, budget });
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: "Internal error" });
  }
});

app.get("/projects", async (req, res) => {
  try {
    const { minBudget } = req.query;
    let sql = "SELECT * FROM projects WHERE 1=1";
    const params = [];
    if (minBudget) { sql += " AND budget >= ?"; params.push(Number(minBudget)); }
    const [rows] = await pool.query(sql, params);
    ok(res, rows);
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: "Internal error" });
  }
});

app.get("/projects/:id", async (req, res) => {
  try {
    const id = Number(req.params.id);
    const [rows] = await pool.query("SELECT * FROM projects WHERE id = ?", [id]);
    if (rows.length === 0) return notFound(res, "Project");
    ok(res, rows[0]);
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: "Internal error" });
  }
});

app.put("/projects/:id", async (req, res) => {
  try {
    const id = Number(req.params.id);
    const { title, budget } = req.body;

    const [r] = await pool.query(
      "UPDATE projects SET title = COALESCE(?, title), budget = COALESCE(?, budget) WHERE id = ?",
      [title ?? null, budget ?? null, id]
    );
    if (r.affectedRows === 0) return notFound(res, "Project");
    const [rows] = await pool.query("SELECT * FROM projects WHERE id = ?", [id]);
    ok(res, rows[0]);
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: "Internal error" });
  }
});

app.delete("/projects/:id", async (req, res) => {
  try {
    const id = Number(req.params.id);
    const [r] = await pool.query("DELETE FROM projects WHERE id = ?", [id]);
    if (r.affectedRows === 0) return notFound(res, "Project");
    ok(res, { deleted: id });
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: "Internal error" });
  }
});

// ---------- Links (user ‚Üî project) ----------
app.post("/links", async (req, res) => {
  try {
    const { user_id, project_id } = req.body;
    if (!user_id || !project_id) return res.status(400).json({ error: "user_id and project_id required" });

    const [r] = await pool.query(
      "INSERT INTO user_projects (user_id, project_id) VALUES (?, ?)",
      [Number(user_id), Number(project_id)]
    );
    ok(res, { id: r.insertId, user_id, project_id });
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: "Internal error" });
  }
});

// –ø—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get("/users/:id/projects", async (req, res) => {
  try {
    const id = Number(req.params.id);
    const [rows] = await pool.query(`
      SELECT p.*
      FROM user_projects up
      INNER JOIN projects p ON p.id = up.project_id
      WHERE up.user_id = ?
    `, [id]);
    ok(res, rows);
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: "Internal error" });
  }
});

// –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞
app.get("/projects/:id/users", async (req, res) => {
  try {
    const id = Number(req.params.id);
    const [rows] = await pool.query(`
      SELECT u.*
      FROM user_projects up
      INNER JOIN users u ON u.id = up.user_id
      WHERE up.project_id = ?
    `, [id]);
    ok(res, rows);
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: "Internal error" });
  }
});

// ---------- –ó–∞–ø—É—Å–∫ ----------
const PORT = process.env.PORT || 3000;

ensureSchema()
  .then(() => {
    app.listen(PORT, () => console.log(`üöÄ Server running on http://localhost:${PORT}`));
  })
  .catch((e) => {
    console.error("Schema ensure failed:", e);
    process.exit(1);
  });
